	Представлением называется SQL-зaпpoc на выборку, 
которому присвоили имя и который затем сохранили в базе данных. Представление позволяет пользователю увидеть результаты сохраненного запроса, а SQL 
обеспечивает доступ к этим результатам таким образом, как если бы они были реальной таблицей базы данных. 
Представления используются по нескольким причинам: 
	• они позволяют сделать так, что разные пользователи базы данных будут 
видеть ее по-разному; 
	• с их помощью можно ограничить доступ к данным, разрешая пользователям видеть только некоторые из строк и столбцов таблицы; 
	• они упрощают доступ к базе данных, показывая каждому пользователю 
структуру хранимых данных в наиболее подходящем для него виде. 

	** Создание представления **

CREATE VIEW view_name AS
	SELECT column_name
	FROM table_name
	WHERE ... ;

	** Удаление представления **

DROP VIEW view_name CASCADE;



	После определения представления к нему можно обращаться с помощью инсгрукции SELECT, как к обычной таблице.

	Имя представления, имя таблицы Представления, указывается в предложении FROM как имя обычной таблицы, 
а ссылка на столбцы предсгавления в инструкции SELECT осуществляется точно так же, как на столбцы таблицы. 
К некоторым представлениям можно также применять инструкции INSERT, DELETE и UPDATE для изменения данных. 
Таким образом, представление можно использовать в инструкциях SQL так, как 
будто оно является обычной таблицей. Однако перед тем как приступать к обновлению представления, крайне важно разобраться с его влиянием на лежащие в его 
основе таблицы. 

	Когда СУБД встречает в инструкции SQL ссылку на представление, она отыскивает его определение, сохраненное в базе данных. Затем СУБД преобразует 
пользовательский запрос, ссылающийся на представление, в эквива.лентный запрос 
к исходным таблицам представления и выполняет его. Таким образом, СУБД создает иллюзию существования предсгавления в виде отдельной таблицы и в то же 
время сохраняет целостность исходных таблиц. 

	Преимущества представАений 
Использование представлений в базах данных различных типов может оказаться полезным в самых разнообразных ситуациях. В базах данных на персональных 
компьютерах представления применяются для удобства и позволяют упрощать 
запросы к базе данных. В промышленных базах данных представления играют 
главную роль в создании собственной структуры базы данных для каждого пользователя и обеспечении ее безопасности. Основные преимущества представлений 
перечислены ниже. 
	• Безопасность. Каждому пользователю можно разрешить доступ к небольшому числ у представлений, содержащих только ту информацию, 
которую ему позволено знать. Таким образом можно осуществить ограничение доступа пользователей к хранимой информации. 
	• Простота запросов. С помощью представления можно извлечь данные 
из нескольких таблиц и представить их как одну таблицу, превращая тем 
самым запрос ко многим таблицам в однотабличный запрос к представлению. 
	• Структурная простота. С помощью представлений для каждого пользователя можно создать собственную структуру базы данных, определив 
ее как множество доступных пользователю виртуальных таблиц. 
	• Защита от изменений. Представление может возвращать непротиворечивый и неизменный образ структуры базы данных, даже если исходные 
таблицы разделяются, реструктуризуются или переименовываются. Заметим, однако, что определение представления должно быть обновлено, 
когда переименовываются лежащие в его основе таблицы или столбцы. 
	• Целостность данных. Если доступ к данным или ввод данных осуществляется с помощью представления, СУБД может автоматически проверять, 
выполняются ли определенные условия целостности. 
		

		** Недостатки представлений ** 
		Наряду с перечисленными выше преимуществами, представления обладают 
и тремя существенными недостатками. 
	• Производительность. Представление создает лишь видимость существования соответствующей таблицы, 
и СУБД приходится преобразовывать запрос к представлению в запрос к исходным таблицам. 
Если представление отображает многотабличный запрос, то простой запрос к представлению 
становится сложным объединением и на его выполнение может потребсr 
ваться много времени. Однако это связано не с тем, что запрос обращается 
к представлению, - любой плохо построенный вопрос может вызвать прсr 
блемы с производительностью. Дело в том, что сложность запроса скрывается в представлении, так что пользователи не представляют, какой объем 
работы может вызвать даже кажущийся простым запрос. 

	• Управляемость. Представления, как и все прочие объекты баз данных, 
должны быть управляемы. Если разработчики и пользователи баз данных 
смогут бесконтрольно создавать представления, то работа администратора 
базы данных станет существенно сложнее. Это в особенности справедливо 
в том случае, когда создаются представления, в основе которых лежат другие представления, которые, в свою очередь, могут быть основаны на других представлениях. 
Чем больше уровней между базовыми таблицами и 
представлениями, тем сложнее решать проблемы с представлениями, которые могут возникнуть в такой системе. 
	• Ограничения на обновление. Когда пользователь пытается обновить 
строки представления, СУБД должна преобразовать запрос в запрос на 
обновление строк исходных таблиц. Это возможно для простых представлений; более сложные представления обновлять нельзя, они доступны ТОЛЬКО для выборки. 

 
** Горизонтальные представления ** широко применяются для ограничения досrупа пользователей к строкам таблиц, 
чтобы пользователи мог ли видеть не все строки, а только некоторые из них. Например, 
в учебной базе данных можно позволить менеджеру по продажам видеть в таблице SALESREPS только строки ел ужащих, работающих в его регионе.
	Горизонтальные представления удобно применять, когда исходная таблица содержит данные, которые относятся к различным 
организациям или пользователям. Они предоставляют каждому пользователю личную таблицу, содержащую только те строки, которые ему необходимы. 
Вот еще несколько примеров горизонтальных представлений. 

** Вертикальные представления ** Еще одним распространенным применением представлений является ограничение доступа к столбцам таблицы.
 Список имен избранных столбцов в инструкции 
CREATE VI EW определяет, какие столбцы исходной таблицы войдут в представление. Поскольку это вертикальные представления, в них входят все строки исходных таблиц, 
и предложение WHERE в определении представления не требуется. 

** Смешанные представления ** При создании представлений SQL не разделяет их на горизонтальные и вертикальные. 
В SQL просто отсутствуют понятия горизонтального и вертикального 
представлений. Они лишь помогают вам понять, каким образом из исходной таблицы формируется представление. Использование представлений, разделяющих 
исходную таблицу как в горизонтальном, так и вертикальном направлении, -
вполне распространенное явление. 
Данные, пол ученные при помощи этого представления, представляют собой подмножество строк и столбцов таблицы. В этом представлении будут 
видны только те столбцы, которые явно указаны в предложении SELECT, и только те строки, которые удовлетворяют условию отбора в предложении WHERE.

** Сгруппированные представления ** Запрос, определяющий представление, может содержать предложение GROUP ВУ. 
Представление такого типа называется сгруппированным представлением, поскольку 
данные в нем являются результатом запроса с группировкой. Сгруппированные представления выполняют ту же функцию, 
что и запросы с группировкой, - в них родственные строки данных объединяются в группы и для каждой группы в таблице резу льтатов запроса создается одна строка, 
содержащая итоговые данные по этой группе. С помощью сгруппированного предсrавления запрос с группировкой превращается в виртуальную таблицу, 
к которой в дальнейшем можно обращаться с запросами. Вот пример сгруппированного представления.
В отличие от горизонтальных и вертикальных представлений, каждой строке сгруппированного представления не соответствует какая-то одна строка исходной 
таблицы. Сгруппированное представление не является просто фильтром исходной таблицы, скрывающим некоторые строки и столбцы. Оно отображает исходную 
таблицу в виде резюме, поэтому поддержка такой виртуальной таблицы требует от СУБД значительного объема вычислений. 
К сгруппированным представлениям можно обращаться с запросами точно так же, как и к более простым представлениям. Однако сгруппированные запросы 
нельзя обновлять.

** Соединенные представления **
Часто представления используют для упрощения многотабличных запросов. 
Задавая в определении представления двух- или трехтабличный запрос, можно 
создать соединенное представление - виртуальную таблицу, данные в которую извлекаются из двух или трех различных таблиц. 
После создания такого представления к нему можно обращаться с помощью однотабличного запроса; в противном 
случае пришлось бы применять двух- или трехтабличное соединение.




				** Обновление представлений **

	** Обновление представлений и стандарт ANSl/ISO **

В исходном стандарте SQL 1 четко указано, какие представления базы данных 
обновимы в соответствии со стандартом (обновимостъ в данном контексте означает 
вставку, модификацию или удаление). Согласно стандарту, представление можно 
обновлять в том ел учае, если определяющий его запрос соответствует всем перечисленным ниже ограничениям. 
	• Должен отсутствовать предикат DISTINCT, т.е. повторяющиеся строки не 
должны исключаться из таблицы результатов запроса. 
	• В предложении FROM должна быть задана только одна обновляемая таблица, т.е. у представления должна быть одна исходная таблица, 
а пользователь должен иметь соответствующие права доступа к ней. Если исход-ная таблица сама является представлением, то оно также должно у довлетворять этим условиям. 
	• Каждое имя в списке возвращаемых столбцов должно быть ссылкой на 
простой столбец; в этом списке не должны содержаться выражения, вычисляемые столбцы или статистические функции. 
	• Предложение WHERE не должно содержать подчиненный запрос; в нем 
могут присутствовать только простые построчные условия отбора. 
	• В запросе не должны содержаться предложения GROUP ВУ и НAVING.





					*** ХРАНИМЫЕ ПРОЦЕДУРЫ ***

	** Три важные функциональные возможности современных реляционных баз данных уровня предприятия - хранимые процедуры, функции и триггеры. 
Хранимъw процедуры могут решать прикладные задачи непосредственно в самой базе данных, например хранимая процедура может 
реализовать прикладную логику принятия заказа от клиента или перевода денег из 
одного банка в другой. Функции представляют собой хранимые SQL-программы, которые для каждой строки данных возвращают только одно значение. В отличие от 
хранимых процедур, функции вызываются при обращениях к ним в SQLинструкциях (которые могут располагаться почти везде, где может использоваться 
имя столбца). Это делает их идеальным средством для выполнения преобразований 
и вычислений над данными, выводимыми в результате запросов или используемыми 
в условиях отбора. Практически во всех реляционных СУБД имеется собственный 
набор функций общего назначения, так что добавленные пользователями базы данных функции часто называются полъзователъскими. 
Триггеры используются для автоматического вызова хранимых процедур на основе некоторых возникающих в базе данных условий. 
Например, триггер может автоматически переводить деньги со 
сберегательного счета на чековый, когда последний оказывается исчерпан. В этой 
главе рассматриваются базовые концепции хранимых процедур, функций, триггеров и их реализация в некоторых популярных СУБД

	** С появлением хранимых процедур язык SQL обогатился рядом дополнительных 
базовых возможностей, обычно связанных с языками программирования. Последовательности расширенных инструкций SQL группируются, образуя программы или 
процедуры SQL (для простоты мы объединяем процедуры, функции и триггеры под 
одним общим названием и говорим о процедурах SQL). Конкретные детали зависят 
от реализации языка, но в целом эти возможности можно описать так. 

	• Условное выполнение. Структура IF ... THEN ... ELSE позволяет SQLпроцедуре проверить условие и, в зависим.ости от результата, выполнить 
различные действия. 
	• Циклы. Цикл WHILE или FOR либо иная подобная структура позволяет 
многократно выполнять последовательность инструкций SQL до тех пор, 
пока не выполнится заданное условие окончания цикла. В некоторые 
реализации языка SQL включены специальные циклы для прохода по 
всем строкам. в таблице результатов запроса. 
	• Блочная структура. Последовательность инструкций SQL может быть 
сгруппирована в единый блок и использована в других управляющих 
конструкциях как единая инструкция. 
	• Именованные переменные. SQL-процедура может сохранить вычисленное, извлеченное из базы данных или пол ученное любым другим способом значение в переменной, а когда оно понадобится снова - извлечь 
его из этой переменной. 
	• Именованные процедуры. Последовательность инструкций SQL можно 
объединить в группу, дать ей им.я и назначить формальные входные 
и выходные параметры, так что пол учится обычная подпрограмм.а или 
функция, какие используются в. традиционных языках программирования. Определенную однажды таким образом. процедуру можно вызывать 
по имени, передавая ей нужные значения в качестве входных параметров. Если она является функцией, возвращающей значение, то его можно 
использовать в выражениях. 
	Набор элементов, реализующих все эти возможности, составляет язык хранимых процедур (SPL - Stored Procedure Language).










