	*** ХРАНИМЫЕ ПРОЦЕДУРЫ ***

Во многих распространенных диалектах SPL ДЛЯ СОЗДАНИЯ хранимой процедуры используется инструкция CREATE PROCEDURE. 
Эта инструкция назначает новой процедуре имя, по которому в дальнейшем ее можно будет вызывать. Имя 
процедуры должно соответствовать общим правилам для идентификаторов SQL. Хранимая процедура может принимать нуль или более параметров.
Во всех распросrраненных диалектах SPL 
значения параметров указываются в виде разделенного запятыми списка, заключенного в скобки и следующего за именем вызываемой процедуры. Заголовок 
хранимой процедуры содержит имена параметров и типы их данных. Для параметров хранимых процедур могут использоваться те же типы данных, которые поддерживаются СУБД для столбцов таблиц.
Когда вызывается процедура, переданные ей 
аргументы присваиваются ее параметрам и начинается выполнение тела процедуры. Имена параметров могут использоваться в теле процедуры (и, в частности, 
в составляющих ее стандартных инструкциях SQL) везде, где допускается использование констант. Встретив имя параметра, СУБД подставляет на его место текущее значение этого параметра.
В дополнение к входным параметрам, некоторые диалекты SPL поддерживают выходные параметры, с помощью которых хранимые процедуры могут возвращать 
значения, вычисленные в ходе выполнения процедуры. При интерактивном вызове хранимых процедур от выходных параметров мало пользы, а вот если одна хранимая процедура вызывает другую, 
выходные параметры позволяют им эффективно обмениваться информацией. Некоторые диалекты SPL поддерживают параметры, которые одновременно являются и входными, и выходными, т.е. их значения передаются хранимой процедуре, 
та их меняет и результирующие значения возвращаются вызывающей процедуре.

	*** Вызов хранимой процедуры ***

Хранимую процедуру можно вызывать по-разному: из приложения с помощью соответствующей инструкции SQL, из другой хранимой процедуры, а также в интерактивном режиме. Синтаксис вызова хранимых процедур зависит от используемого диалекта.
Передаваемые процедуре параметры указываются в том порядке, в каком они объявлены, в виде списка, заключенного в скобки.

	*** Переменные хранимых процедур ***

В хранимых процедурах удобно (а иногда и просто необходимо) объявлять переменные для хранения некоторых промежуточных значений. Эту возможность обеспечивают все диалекты SQL. Обычно переменные объявляются в начале тела 
процедуры, сразу за заголовком и перед последовательностью составляющих ее инструкций SQL. Для переменных можно использовать все те же типы данных, что и для столбцов таблиц (разумеется, поддерживаемые данной СУБД).

	*** Блоки инструкций ***

Практически во всех хранимых процедурах, кроме самых простых, возникает необходимость объединения некоторой последовательности инструкций в группу, интерпретируемую как одна инструкция. 
Например, если в вашей процедуре используется конструкция IF ... THEN ... ELSE, то, скорее всего, вам понадобится возможность группировки инструкций, поскольку большинство диалектов SPL 
требует, чтобы каждая ветвь условной конструкции состояла только из одной инструкции. Поэтому, если необходимо выполнение в ветви нескольких инструкций, их следует объединить в один блок. 

	*** Функции ***

В дополнение к хранимым процедурам, многие диалекты SPL померживают 
хранимые функции. От процедуры функция отличается тем, что при каждом вызове возвращает одно значение (некоторые данные, объект, ХМL-документ), в то время как хранимая процедура может либо вернуть много разных значений, либо 
ни одного. Поддержка возвращаемых значений сильно варьируется от диалекта SPL к диалекту. Функции обычно используются в качестве выражений столбцов в инструкциях SELECT и таким образом вызываются по одному разу для каждой 
строки результирующего множества, выполняя вычисления, преобразования данных и другие действия для того, чтобы получить возвращаемое значение столбца. 

	*** Возврат значений через параметры ***

Хранимая функция возвращает только одно значение. Однако некоторые диалекты SPL позволяют возвращать из процедуры более одного значения с помощью 
выходных параметров. Выходные параметры перечисляются в списке параметров 
процедуры так же, как и входные параметры. Однако вместо того чтобы передавать данные в процедуру, они возвращают данные из хранимой процедуры. 

	*** Условное выполнение ***
 
Одним из базовых элементов хранимых процедур является конструкция 
IF ... THEN ... ELSE, используемая для организации ветвлений внутри процедуры.

	*** Циклы ***

Еще одним базовым элементом хранимых процедур практически во всех диалектах является конструкция для многократного выполнения группы инструкций. 
Проще говоря, это - цикл. Циклы могут быть разными: в зависимости от используемого вами диалекта SPL, могут померживаться циклы FOR в стиле Basic со 
счетчиком итераций (в которых значение целочисленной переменной уменьшается или увеличивается при каждом проходе цикла, пока не достигнет заданного 
предела) или циклы WHILE в стиле С, в которых условие продолжения цикла вычисляется в начале или конце группы составляющих его инструкций. 

	*** Циклы с курсорами ***
 
Одной из самых распространенных ситуаций, в которых требуется циклическое выполнение определенных действий, является построчная обработка результирующего множества, возвращенного некоторым запросом. Во всех основных 
диалектах SPL для этого предусмотрены специальные конструкции. Концептуально они подобны встраиваемым в клиентские приложения инсrрукциям DECLARE 
CURSOR, OPEN CURSOR, FETCH и CLOSE CURSOR встроенного SQL или соответствующим вызовам АРI-функций. Однако результат запроса в данном случае направляется не приложению, а хранимой процедуре, которая выполняется самой 
СУБД. Соответственно, результирующие данные оказываются не в переменных 
клиентского приложения, а в локальных переменных хранимой процедуры. 

	*** Преимущества хранимых процедур ***
 
Перенос программного кода из клиентских приложений прямо в базу данных 
в виде хранимых процедур приносит много пользы, причем как администраторам 
базы данных, так и программистам и конечным пользователям. Вот основные преимущества этого подхода. 
	• Производительность. Многие популярные СУБД компилируют хранимые процедуры (либо автоматически, либо по запросу), создавая их 
внутреннее представление, которое выполняется гораздо быстрее, чем 
если бы вы динамически компилировали каждую составляющую их инструкцию SQL. 
	• Повторное использование. После того как хранимая процедура создана, ее можно вызывать из любых приложений, и не нужно снова и снова 
программировать одни и те же действия, благодаря чему экономится 
время программиста и уменьшается риск программных ошибок в клиентских приложениях. 
	• Сокращение сетевого трафика. В системах "клиент/сервер" с точки 
зрения нагрузки на сеть экономнее пересылать между парой компьютеров только запрос на выполнение хранимой процедуры и получать результаты ее работы, чем обрабатывать каждую инструкцию SQL в отдельности. 
Особенно это важно в тех случаях, когда сетевой трафик и так 
слишком высок или пропускная способность соединения низкая. 
	• Безопасность. В большинстве СУБД хранимые процедуры считаются 
защищаемыми объектами, и им назначаются отдельные привилегии. 
Пользователь, вызывающий хранимую процедуру, должен иметь право 
на ее выполнение, но не обязательно на доступ к таблицам, с которыми 
она работает (просматривает или модифицирует). Таким образом, администратор базы данных получает более широкие возможности в плане 
защиты данных и управления доступом пользователей к объектам базы 
данных.
	• Инкапсуляция. Идея хранимых процедур соответствует одной из главных 
целей объектно-ориентированного проrраммирования (ООП) - инкапсуляции данных, структур и кода в набор весьма ограниченных, четко определенных внешних интерфейсов. В терминах ООП хранимые процедуры 
можно называть методами, являющимися единственным средством мя работы пользователей или внешних проrрамм с объектами РСУБД. Если вы 
хотите строго придерживаться объектно-<Jриентированного подхода, то 
с помощью системы защиты СУБД нужно полностью запретить непосредственный доступ к дсцшым через SQL и осrавить для доступа к базе данных 
только хранимые процедуры. Однако столь суровые оrраничения практикуются очень редко. 
	• Простота доступа. В больших базах данных уровня предприятия набор 
хранимых процедур может быть основным средством для доступа прикладных проrрамм к базе данных. Хранимые процедуры образуют точно 
определенное множество транзакций и запросов, которые приложения 
могут выполнять над базой данных. Для большинства прикладных программистов вызов простой предопределенной функции, которая проверяет остаток на счету для указанного номера клиента или добавляет заказ с указанными идентификаторами 
клиента и товара и количеством 
последнего, оказывается существенно проще для понимания, чем соответствующие инструкции SQL. 
	• Обеспечение бизнес-правил. Возможности ветвления в хранимых процедурах очень часто используются для размещения бизнес-правил в базе 
данных. Например, хранимая процедура, используемая для добавления заказа к базе данных, может содержать логику проверки достаточности кредита у клиента, размещающего заказ, а также проверять наличие достаточного количества товара 
на складе и отвергать заказ, если хотя бы одно 
из этих условий не выполнено. В большой компании может быть несколько различных способов размещения заказов в базе данных: одна проrрамма для продавцов, другая - для отдела телемаркета, третья - для заказов через веб-сайт и т.д. 
Каждая из них содержит свою процедуру принятия заказа; обычно эти процедуры написаны разными про1раммистами в разное время. Но если все они используют одну и ту же хранимую процедуру для 
добавления заказа, то тем самым гарантируется единообразность применения бизнес-правил независимо от происхождения заказа. 







































